1.cookie的组成：
    name 名称
    value 值
    expires 有效终止日期
    domain 所在的域名
    size 大小
    path 所在的目录

2.浏览器在发送cookie时只是发送name和value值，
服务器在设置cookie时，设置的时name、value、path、domain值

3.跨域请求：
    图像Ping：通过img的src标签
    jsonp：通过动态script标签
    设置document.domain
    使用iframe
    h5新特性：window.postMessage

4.cookie localstorage sessionstorage
    cookie:
        cookie是网站为了标示用户身份而存储存在用户本地终端上的数据。
        cookie数据始终在同源的http请求中携带，始终会在浏览器和服务器间来回传递。
        sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。
    存储大小：
        cookie数据大小不能超过4k。
        sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。
    有期时间：
        localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；
        sessionStorage  数据在当前浏览器窗口关闭后自动删除。
        cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭
    作用域不同:
        sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；
        localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。

5.css animation配合keyframes使用

6.如果是行内元素呢？如果字体font-size是10px，行高line-height是2px，显示多高？显示的时字体的大小高度，因为浏览器识别的最小字体时12，所以高度最小也是12
如果是block元素，如果设置了line-height,高度就是行高，否则就是字体大小的高度

7.em和rem：
    rem是一个相对单位，css3新增的单位。相对的是html根元素，如果不支持，那么再多加一个绝对单位
    em是相对于父级的。

8.cpu和gpu：
    gpu并发计算，计算量较大，性能更高

9.  gif:使用无损压缩，支持单一透明色
    jpg:使用失真压缩，不支持动画和透明色
    png:无损数据压缩的。有8位、24位、32位三种形式，8位支持两种不同的透明方式(索引透明和alpha透明)，
        24位不支持透明，32位支持透明。

10.渐进增强和优雅降级：
    渐进增强：一开始构建站点的最小特性，然后针对不同的浏览器去追加功能，对于性能好的浏览器和设备可以展示出好的效果
    优雅降级：一开始构建一个完整的站点，然后针对不同的浏览器和设备进行测试和修复

11.css样式导入link和import
    引用的方式不同：link是外部引用、import是导入式
    放置的位置不同：link放在head标签中，import放在style标签中
    加载方式不同：link和dom一起加载渲染，import是dom加载完成之后才会加载
    使用js去修改样式的时候，只能使用link引入的样式，import中的dom，js无法控制
    兼容性不同：link兼容各种内核浏览器，import不兼容低版本浏览器
    加载内容不同：link除了加载css文件，还能加载mime类型的文件，import只能加载css样式

12.语义化的html
    语义化的标签往往和默认的样式有关系，像h系列，p标签
    更加直观认识和理解标签的用途，对搜索引擎友好

13.利用多个域名提供网站资源更加有效
    浏览器在同一时间可以从同一个域名下载的资源有限，超过限制数目的请求会被阻止。
    CDN缓存更加有效
    节约cookie带宽
    节约主域名的连接数，提高页面的响应速度

14.css animation实现幻灯片效果
    -webkit-animation-name: "loops"; /*动画名称*/
    -webkit-animation-duration: 10s; /*动画的持续时间*/
    -webkit-animation-iteration-count: infinite;/****动画的循环次数****/

15.FOUC(无样式内容闪烁)
    导致的原因可能是：
        使用import方式导入css表
        将样式文件放在了页面的底部
        有几个样式表，分别放在了页面的不同位置
    解决办法：尽量使用link方式导入，并放在页面的HEAD中

16.doctype(文档类型)的作用？
    位于html标签最前面，告诉浏览器以哪种规范渲染页面。(标准模式和怪异模式)
    当浏览器厂商开始创建与标准兼容的浏览器时，他们希望确保向后兼容性。
    为了实现这一目的，他们创建了两种呈现模式，标准和混杂模式。
    在标准模式中，浏览器会根据规范呈现页面；
    在混杂模式中。页面会以一种相对宽松的向后兼容方式显示。混杂模式常用于模拟老式浏览器的行为，以防止老站点无法工作。
　　 他们最大的不同是对盒模型的解析。

     document.compatMode获取浏览器的解析方式

17.data-属性的作用？
    为开发者自定义标签属性的，可以通过dataset来获取属性的值，或者直接使用getAttribute获取

18.reset样式文件的作用和好处
    可以重置一些元素默认的样式，使其在不同的浏览器中保持一致性。但是多写了一些无用的样式反而会影响
    页面的渲染负担。可以使用normalize.css，它是可以定制的样式文件

19.栅格系统＝》bootstrap ant.design

20.css预处理器的优缺点
    优点：开发速度提升、代码优化效率高、代码通俗易懂、运用编程的思想
    缺点：学习成本较高

21.浏览器判断元素是否匹配某个css选择器
    从后往前判断，浏览器产生一个集合，然后向上匹配，如果不匹配上一级，就从这个集合中删除
    ，然后再向上一级匹配，直到都匹配完，集合中剩下的就是符合css选择器的元素了

22.box-sizing:
    border-box:宽度width包含border
    content-box:宽度width不包含border
两个左浮动的元素div，设置width:50%,border:1px,如果要在一行显示，必须设置box-sizing:border-box
，表示width是包含边框的

23.自适应布局和响应式布局的区别：
    自适应布局是针对不同分辨率的页面自动适应。
    响应式布局可以根据屏幕的大小自动调整页面的展现方式。
    响应式布局的一些技术点纪录：
     (1)允许网页的宽度自动的调整
     (2)尽量少使用绝对的宽度，多点百分比
     (3)相对大小的字体:字体不要使用px写死，最好使用相对大小的em，
        或者高清方案rem，这个不限制与字体，别的属性也可以这么设置
     (4)流式布局，float等float的好处是，如果宽度太小，放不下两个元素，
        后面的元素会自动滚动到前面元素的下方，不会在水平方向overflow（溢出），避免了水平滚动条的出现。
     (5)选择加载css，<link rel="stylesheet" type="text/css" media="screen and (max-device-width: 400px)" href="tinyScreen.css" />，
        这个意思是如果屏幕宽度小于400像素（max-device-width: 400px），就加载tinyScreen.css文件。

24.js中的this
    (1).方法调用模式：
        当函数被保存成对象的一个属性时，成为该对象中的一个属性方法时，this指向的是该对象
    (2).函数调用模式：
        普通方法中的this指的是全局对象
    (3).构造器调用模式：
        this指代的是new出的对象
    (4).使用apply或者call时，this指代的是调用时的第一个参数

25.CommonJs 是服务器端模块的规范，Node.js采用了这个规范，且是同步加载的
AMD、CMD是异步加载模块的

26.使用闭包的好处：
    模拟面向对象的编程风格，提高代码的执行效率
    可以将结果进行缓存

27.关于 Function.prototype.bind() 内部，这里有个非常简单的例子：
    Function.prototype.bind = function (scope) {
        var fn = this;
        return function () {
            return fn.apply(scope);//使用call效果一样
        };
    }

28.document.write是js对document.open所开启的文档流，能够直接在文档流中写入字符串，
    一旦文档流关闭，write就会重新打开新的文档流，原来的文档流已经被清空，浏览器将重新构建DOM
    并且渲染页面。一般用于重写页面。清空之前的document

29.浏览器的特性检测，就是针对不同的浏览器支持的独有的特性进行判断是否支持：
    document.all是IE独有的，可以利用它进行区分IE和其他浏览器

30.attribute和property
    property是DOM对象自身就拥有的属性
    attribute是我们通过设置HTML标签而给之赋予的特性

31.同源策略：同源是指域名、协议、端口都一致

32.什么是 "use strict"? 使用它的好处和坏处分别是什么
    "严格模式"有两种调用方法
　　　　　　1）将"use strict"放在脚本文件的第一行，则整个脚本都将以"严格模式"运行。
            如果这行语句不在第一行，则无效，整个脚本以"正常模式"运行。如果不同模式的代码文件合并成一个文件，这一点需要特别注意。
　　　　　　2）将整个脚本文件放在一个立即执行的匿名函数之中。
　　　　    好处
    　　　　　　- 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;
    　　　　　　- 消除代码运行的一些不安全之处，保证代码运行的安全；
    　　　　　　- 提高编译器效率，增加运行速度；
    　　　　　　- 为未来新版本的Javascript做好铺垫。
　　　　    坏处
　　　　　　    同样的代码，在"严格模式"中，可能会有不一样的运行结果；
              一些在"正常模式"下可以运行的语句，在"严格模式"下将不能运行

33.css的重排和重绘
    重绘是一个元素的外观变化所引发的浏览器行为；
    重排是引起DOM树重新计算的行为；
        改变窗囗大小
        改变文字大小
        添加/删除样式表
        脚本操作DOM
        设置style属性
    给元素添加动画的时候，将元素设置成absolute或者fixed，使其脱离文档流，对其他元素不会造成影响
34.从前端角度出发谈谈做好seo需要考虑什么
    语义化html标签
    合理的title, description, keywords;
    重要的html代码放前面
    少用iframe, 搜索引擎不会抓取iframe中的内容
    图片加上alt

35.如果把 HTML5 看作做一个开放平台，那它的构建模块有哪些
   1）Web Storage API
　　2）基于位置服务LBS
　　3）无插件播放音频视频
　　4）调用相机和GPU图像处理单元等硬件设备
　　5）拖拽和Form API

36.基本数据类型保存在栈内存中，引用类型保存在堆内存中

37.浏览器内核分为渲染引擎和js引擎

38.实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果
<div style="height:1px;overflow:hidden;background:red"></div>

39.new操作符具体干了什么呢
    创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。
    属性和方法被加入到 this 引用的对象中。
    新创建的对象由 this 所引用，并且最后隐式的返回 this 。

40.Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型＝》hasOwnProperty
