1.遍历this.props.children
    React.Children.map(this.props.children,(child)=>{
        console.log(child)
    })

2.判断用户的是三击事件
        var count = 0, timer;
        document.onclick = function(){
            if(count < 2){
                if(timer){
                    clearTimeout(timer);
                }
                count ++;
                timer = setTimeout(function(){
                /***意思是如果半秒之内还没有点击，直接从0，也就是第一次开始**/
                    count = 0;
                }, 500);
            }else if(count === 2){
                count = 0;
                clearTimeout(timer);
                threeClick();
            }
        }
        function threeClick(){
            console.log('three click');
        }

3.原型链继承，获取实例的prototype
    child3.__proto__

4.判断一个对象是jquery对象

    obj instanceof jQuery

5.作用域链

6.react父子组件之间通信的方式：props，其他的方式？兄弟之间通信？
    父子组件之间：父组件将子组件需要的props传给子组件，子组件之间通过this.props进行获取
    子父组件之间：给子组件设置ref，将传递的内容写在子组件里面，父组件通过ref获取子组件，进而获取里面的内容
    同级组件之间：
        通过父级组件作为中介。
        引入redux


7.循环添加点击事件，输出对应的循环下标，除了闭包，其他实现的方式？
    (1)使用闭包
    (2)循环变量使用let定义
    (3)每次将变量存一下，然后再赋给相应的标签

8.window.name:解决跨域问题：
    使用iframe的iframe.contentWindow.name，
    通过获取这个name就可以把不同域下面的页面中的数据传递到本域名下面，成功的进行了跨域访问

9.常用正则表达式
    去除前后空格的正则表达式：/^\s*(.*?)\s*$/
    eg:'   sk    skdhf    '.replace(/^\s*(.*?)\s*$/,'$1')
        //sk    skdhf

10.jquery中 bind live on delegate的区别
    .bind()是直接绑定在元素上，浏览器兼容性也很好，如果不手动设置stopPropagation或者cancelBubble,阻止冒泡的话，
    会一直冒泡到父级元素，甚至祖先元素document上面。onclick是bind的简化
    .live()通过冒泡的方式绑定到元素上面，绑定到document DOM上面，好处就是不需要给每一个需要添加事件的元素都加一遍，
    即使是动态新添加的元素，依然可以绑定上。这个方法只需要在document上绑定一次就可以了
    .delegate()相比起live，绑定的范围缩小了，可以指定绑定的元素，性能优于live，但是仍然需要迭代找到实际需要执行
    事件的元素，也可以用在动态添加的元素上面。
    .on()整合了前面三种点击事件的实现方式。


11.function fun1(){
    this.run = function(){
        console.log(this)
        setTimeout(function(){
            console.log(this);
        },1000)
    }
}
var f = new fun1();
f.run();
//fun1 window
