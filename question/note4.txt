1.正则表达式
    字面量方式 /a/
    构造函数方式  new RegExp()

2.匹配普通字符，直接写此字符就可以了 /str/

3.特殊字符要匹配，需要添加转义字符 \\n

4.[]表示一个字符类（字符集合），这里面只能选择一个进行匹配
    [^] 字符取反
    只要匹配成功一个就会返回true
    /[js]/.test('javascript') //true
    /[js]/.test('javascript 11222')//true
    /[js]/.test('avascript') //true
    /[js]/.test('avacript') //false
    /[^js]/.test('avacript   yhg') //true
    /[^js]/.test('jsssss') //false


    别名：
    .除了\n之外，都能匹配到－－》/[^\n]/
    \w ---> /[a-zA-Z0-9_]/
    \W －－－》/[^a-zA-Z0-9_]/
    \d ---> /[0-9]/
    \D ---> /[^0-9]/
    \s ---> 空格和制表符
    \S －－－》除了空格和制表符等之外的

    量词：{}
    {2} {2,5} {3,}
    简写形式：
    ?   0次或者1次
    +   大于等于1
    *   可以是0次

    默认是贪婪匹配
    /\d+?/  后面添加一个问号，改变贪婪匹配

5.选择
    ｜只要匹配上就会将后面的条件忽略掉
    var str = 'css html'
    var pattern = /css|js|html/
    pattern.exec(str)//css

    /a|ab/.exec('ab')//a


6.分组
    /ab+/.exec('abab') //ab
    /(ab)+/.exec('abab')//abab
    /(ab)c/.exec('abcd')//['abc','ab'] //捕获ab
    /(?:ab)c/.exec('abcd')//['abc']//非捕获性分组

    /(ab) cd ab/.exec('ab cd ab')
    /(ab) cd \1/.exec('ab cd ab')// \1代表第一个分组，以此类推
    “<p><a>这是一段文字</a></p>”
    匹配p标签里面的内容
    var regexp = /<([a-zA-Z]+)>(.*?)<\/\1>/使用分组 ？禁止贪婪匹配

7.指定匹配位置
    ^以...开头   和[^]   作区分

    $末尾匹配

    \b 表示单词的边界
        <p class="odd odd2"></p>
        查找class名包含odd的元素
        new RegExp("(^|\\s+)" + className + "($|\\s+)")或者
        new RegExp("\\b" + className + "\\b"),确保odd前后都是单词的边界即可

        //前瞻性匹配
        var str = "javascript"
        pattern = /java(?=script)/   //java

        //负向前瞻性
        var str = "javas"
        pattern = /java(?!script)/   //java

        实例方法：exec(test)执行原理：lastIndex 循环执行   (全局匹配)

8.RegExp实例属性
    ignoreCase
    global
    multiline
    source
    lastIndex

    构造函数属性:分组 RegExp.$1

9.字符串中运用正则表达式
    var str = 'html.js'
    var pattern = /js/
    str.search(pattern) //5 返回位置

    var str = 'js js js'
    var pattern = /(j)s/g
    str.match(pattern)// 如果是全局匹配，那么不会返回分组中的内容

    split
    var str = 'css ,    html , js'
    var pattern = /\s*,\s*/
    str.split(pattern)

    replace
    var str = 'i love js'
    var pattern = /(js)/
    str.replace(pattern,'<strong>$1</strong>')

    var str = '中国军队和阿扁一起办证';
    var pattern = /国军|阿扁|办证/g;
    console.log(str.replace(pattern,function($0){
        var result = '';
        for(var i = 0;i < $0.length;i++){
            result += "*"
        }
        return result;
    }))

    //转驼峰
    function toCamelCase(str){
        var pattern = /-([a-z])/gi;//必须使用()进行分组，才能匹配到-后面的字母
        return str.replace(pattern,function(all,letter){
            return letter.toUpperCase()
        })
    }

    //匹配HTML标签
    var str = "<span class='name' id='username' style='color:red;'>我是标题</span>";
    var pattern = /<\/?[a-zA-Z]+(\s+[a-zA-Z]+='.*')*>/g;
    console.log(str.match(pattern));


    //邮箱
    var pattern = /^(?:\w+\.)*\w+@(?:\w+\.)*[a-z]{2,4}$/i
    var str = 'abc.cd.ww@www.com.cn'
    console.log(pattern.test(str))

    //URL地址
    var pattern = /^(https?:\/\/)?([^:\/]+)(:\d)?(\/.*)?$/
    var url = 'www.baidu.com'
    pattern.test(url)



        
